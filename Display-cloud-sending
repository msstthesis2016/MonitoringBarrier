// smart barrier for msst2016 thesis
// hatran3e
#include <NewPing.h>
#include "SSD1306.h" // OLED library
#include <WiFi.h>
#include <WiFiMulti.h> // Multi AP
#include <IOXhop_FirebaseESP32.h>

//set config for sonar sensors
#define SONAR_NUM 3      // Number of sensors.
#define MAX_DISTANCE 400 // Maximum distance  cm
#define MIN_DISTANCE 5  // Minimum distance  cm
#define max_sample 5 	// Maximum sample

//display or clear text on LCD 1/0: display/clear
#define PIR 1
#define RADAR 1
#define SONAR 1

// sending to cloud
#define CLOUD 1

//geting time 
#define TIME 1

// AP list
#define AP1 ""
#define PW1 ""
#define AP2 ""
#define PW2 ""
#define AP3 ""
#define PW3 ""

// Set these to send data
#define FIREBASE_HOST ""
#define FIREBASE_AUTH ""

// define pins
#define PIN_RADAR1 17
#define PIN_RADAR2 35
#define PIN_RADAR3 39

#define PIN_PIR1 34
#define PIN_PIR2 25
#define PIN_PIR3 2
//Ultra Sonic
#define trig50 13 
#define echo50 36

#define trig100 21
#define echo100 37

#define trig150 22
#define echo150 38

#define S50 "Distance50:"
#define S100 "Distance100:"
#define S150 "Distance150:"

// define OLED display config
#define SDA    4
#define SCL   15
#define RST   16 //RST must be set by software
SSD1306  display(0x3c, SDA, SCL, RST);

#define Line_1 0	//based on y dimention
#define Line_2 10
#define Line_3 20
#define Line_4 30
#define Line_5 40
#define Line_6 50

#define Row_1 0		// based on x dimention
#define Row_2 45
#define Row_3 90




const char* ntpServer = "pool.ntp.org";
const long  gmtOffset_sec = 7200+18000; //GMT+7
const int   daylightOffset_sec = 0;

String Str_time, Str_data;

WiFiMulti wifiMulti;
typedef struct Data_Fire{
    int D50;
    int D100;
    int D150;
    bool R1;
    bool R2;
    bool R3;
    bool PIR1;
    bool PIR2;
    bool PIR3;
} Data_Fire;

Data_Fire Fire_store;

NewPing sonar[SONAR_NUM] = {   // Sensor object array.
  NewPing(trig50, echo50, MAX_DISTANCE), // Each sensor's trigger pin, echo pin, and max distance to ping. 
  NewPing(trig100, echo100, MAX_DISTANCE), 
  NewPing(trig150, echo150, MAX_DISTANCE)
};

//variables used in program
// long  Fire_store.D50, Fire_store.D100, Fire_store.D150;
int i;
int n = 0;
struct tm timeinfo;

void printLocalTime()
{
  
  if(!getLocalTime(&timeinfo)){
    Serial.println("Failed to obtain time");
    return;
  }
  Serial.println(&timeinfo, "%A, %B %d %Y %H:%M:%S");
}


void drawText(int x, int y, String input_text ) {
    display.setTextAlignment(TEXT_ALIGN_LEFT);
    display.setFont(ArialMT_Plain_10);
    display.drawString(x, y, input_text);
    
}

void setup() {
  
  //set up IO
  pinMode(PIN_RADAR1, INPUT);
  pinMode(PIN_RADAR2, INPUT);
  pinMode(PIN_RADAR3, INPUT);
  
  pinMode(PIN_PIR1,INPUT);
  pinMode(PIN_PIR2,INPUT);
  pinMode(PIN_PIR3,INPUT);

  //set up LCD
  pinMode(16,OUTPUT);
  digitalWrite(16, LOW);    // set GPIO16 low to reset OLED
  delay(50); 
  digitalWrite(16, HIGH); // while OLED is running, must set GPIO16 in high
  Serial.begin(115200);
  Serial.println();
  Serial.println();
  display.init();

  display.flipScreenVertically();
  display.setFont(ArialMT_Plain_10);

  wifiMulti.addAP(AP1, PW1);
  wifiMulti.addAP(AP2, PW2);
  wifiMulti.addAP(AP3, PW3);

  Serial.println("Wait for connecting Wifi...");
  delay(50);
  if(wifiMulti.run() == WL_CONNECTED) {
    Serial.println();
    Serial.println("WiFi connected");
    Serial.print("IP address: ");
    Serial.println(WiFi.localIP());

    Firebase.begin(FIREBASE_HOST, FIREBASE_AUTH);
  }
  else
  {
    Serial.println("WiFi not connected!");
    while(WiFi.status() != WL_CONNECTED)
    {
      Serial.println("Reconnecting wifi...");
      display.drawString(0, 0, "Reconnecting wifi...");
      delay(50);
      if(wifiMulti.run() == WL_CONNECTED)
      {
        Serial.println("");
        Serial.println("WiFi connected");
        Serial.print("IP address: ");
        Serial.println(WiFi.localIP());
        break;
      }
    }
  }
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
  printLocalTime();
  
}

void loop() {

  display.clear ();
  Fire_store.R1 = digitalRead(PIN_RADAR1);
  Fire_store.R2 = digitalRead(PIN_RADAR2);
  Fire_store.R3 = digitalRead(PIN_RADAR3);
  
  Fire_store.PIR1 = digitalRead(PIN_PIR1);
  Fire_store.PIR2 = digitalRead(PIN_PIR2);
  Fire_store.PIR3 = digitalRead(PIN_PIR3);   
  
#if(TIME)
  if(!getLocalTime(&timeinfo)) // get timeinfo
  {
    Serial.println("Failed to obtain time"); 
  }
  else
  {
	String(Serial.println(&timeinfo, "%A, %B %d %Y %H:%M:%S"));
	Str_time= String((timeinfo.tm_mday))+"-"+String((timeinfo.tm_hour))+":"+String((timeinfo.tm_min)) +":"+(String(timeinfo.tm_sec)); //day-hour:minute:second
	drawText(Row_1,Line_1,Str_time);
  }
  

#endif

#if(RADAR)
  // Radar 1
  if (Fire_store.R1 == HIGH) {
    drawText(Row_1,Line_2,"R1 YES");
    display.display();
    Serial.println("R1 YES");
  }
  else {
	  drawText(Row_1,Line_2,"R1 NO");
	  display.display();
	  Serial.println("R1 NO");
  }

  // Radar 2
  if (Fire_store.R2 == HIGH) {
    drawText(Row_2,Line_2,"R2 YES");
    display.display();
    Serial.println("R2 YES");
  }
  else {
	  drawText(Row_2,Line_2,"R2 NO");
	  display.display();
	  Serial.println("R2 NO");
  }
  
  //Radar 3
  if (Fire_store.R3 == HIGH) {
    drawText(Row_3,Line_2,"R3 YES");
    display.display();
    Serial.println("R3 YES");
  }
  else {
	  drawText(Row_3,Line_2,"R3 NO");
	  display.display();
	  Serial.println("R3 NO");
  } 
  // Serial.println();
  delay(10); //delay before display 
#endif
	
#if(PIR)
  
  if(Fire_store.PIR1 == HIGH)
  {
    drawText(Row_1,Line_3, "P1 YES");
    display.display();
    Serial.println("P1 YES");
  }
  else
  {
    drawText(Row_1,Line_3, "P1 NO");
    display.display();
    Serial.println("P1 NO");
  }

  if(Fire_store.PIR2 == HIGH)
  {
    drawText(Row_2,Line_3, "P2 YES");
    display.display();
    Serial.println("P2 YES");
  }
  else
  {
    drawText(Row_2,Line_3, "P2 NO");
    display.display();
    Serial.println("P2 NO");
  }

  if(Fire_store.PIR3 == HIGH)
  {
    drawText(Row_3,Line_3, "P3 YES");
    display.display();
    Serial.println("P3 YES");
  }
  else
  {
    drawText(Row_3,Line_3, "P3 NO");
    display.display();
    Serial.println("P3 NO");
  }
  // Serial.println();
  delay(10);//delay before display
  
#endif
  
#if(SONAR)
  //Ultrasonic 1
  for( i = 0; i<max_sample; i++)
  {
	  delay(30); // Wait 50ms between pings (about 20 pings/sec). 29ms should be the shortest delay between pings.
	  Fire_store.D50 += sonar[0].ping_cm();
  }
  
  Fire_store.D50 = Fire_store.D50/max_sample; //avarage distance
  
  if (Fire_store.D50 < MIN_DISTANCE) { 
//      display.drawString(0, 30, "Too close"); 
		drawText(0,30,"Too close");
		Serial.print(S50);
		Serial.print(Fire_store.D50);
		Serial.print(" cm   ");
  }
  else if (Fire_store.D50 > MAX_DISTANCE || Fire_store.D50 <= MIN_DISTANCE){
		drawText(0,30,"Out of range");
		Serial.print(S50);
		Serial.print(Fire_store.D50);
		Serial.print(" cm   ");
  }
  else {
		display.drawString(60, 30, String(Fire_store.D50) + " cm");
		display.display();
		Serial.print(S50);
		Serial.print(Fire_store.D50);
		Serial.print(" cm   ");
  }
  
  //Ultrasonic 2
  for( i = 0; i<max_sample; i++)
  {
	  delay(30); // Wait 50ms between pings (about 20 pings/sec). 29ms should be the shortest delay between pings.
	  Fire_store.D100 += sonar[0].ping_cm();
  }
  
  Fire_store.D100 = Fire_store.D100/max_sample;  //avarage distance

  if (Fire_store.D100 < MIN_DISTANCE) {  
     drawText(0,40,"Too close");
     Serial.print(S100);
	 Serial.print(Fire_store.D100);
	 Serial.print(" cm   ");
  }
  else if (Fire_store.D100 > MAX_DISTANCE || Fire_store.D100 <= MIN_DISTANCE){
     drawText(0,40,"Out of range");
     Serial.print(S100);
	 Serial.print(Fire_store.D100);
	 Serial.print(" cm   ");
  }
  else {
    display.drawString(60, 40, String(Fire_store.D100) + " cm");
    display.display();
    Serial.print(S100);
	Serial.print(Fire_store.D100);
	Serial.print(" cm   ");
  }
  
  // Utrasonic 3
  for( i = 0; i<max_sample; i++)
  {
	  delay(30); // Wait 50ms between pings (about 20 pings/sec). 29ms should be the shortest delay between pings.
	  Fire_store.D150 += sonar[0].ping_cm();
  }
  
  Fire_store.D150 = Fire_store.D150/max_sample; //avarage distance

  if (Fire_store.D150 < MIN_DISTANCE) {  
     drawText(0,50,"Too close");
     Serial.print(S150);
	 Serial.print(Fire_store.D150);
	 Serial.println(" cm   ");
  }
  else if (Fire_store.D150 > MAX_DISTANCE || Fire_store.D150 <= MIN_DISTANCE){
     drawText(0,50,"Out of range");
     Serial.print(S150);
	 Serial.print(Fire_store.D150);
	 Serial.println(" cm   ");
  }
  else {
    display.drawString(60, 50, String(Fire_store.D150) + " cm");
    display.display();
    Serial.print(S150);
	Serial.print(Fire_store.D150);
	Serial.println(" cm   ");
    Serial.println("-------------------------------");
  }
  delay(10);//delay before display
#endif

#if(CLOUD)
  
	Str_data = Str_time + ","+ (Fire_store.D50) +","+ String(Fire_store.D100)+","+ String(Fire_store.D150);
	String Str_radar = String(Fire_store.R1)+","+String(Fire_store.R2)+","+String(Fire_store.R3);
	String Str_pir = String(Fire_store.PIR1)+","+String(Fire_store.PIR2)+","+String(Fire_store.PIR3);
	
	// JsonObject& temperatureObject = jsonBuffer.createObject();
	// JsonObject& tempTime = temperatureObject.createNestedObject("timestamp");
	// tempTime[".sv"] = "timestamp";

  // push value
  // Firebase.pushInt(S50, Fire_store.D50);
  // Firebase.pushInt(S100, Fire_store.D100);
  // Firebase.pushInt(S150, Fire_store.D150);
  // Firebase.pushBool("R1",Fire_store.R1);
  // Firebase.pushBool("R2",Fire_store.R2);
  // Firebase.pushBool("R3",Fire_store.R3);
  // Firebase.pushBool("P1",Fire_store.PIR1);
  // Firebase.pushBool("P2",Fire_store.PIR2);
  // Firebase.pushBool("P3",Fire_store.PIR3);
  // handle error
  // if (Firebase.failed()) {
      // Serial.print("setting /number failed:");
      // Serial.println(Firebase.error());  
      // return;
  // }
  // delay(100);
  
  // append a new value to /logs
  
  String name = Firebase.pushString("logs", String(n++)+","+Str_data+","+Str_radar+","+Str_pir);
  // Firebase.pushString("logs", Str_data);
  
  // handle error
  if (Firebase.failed()) {
      Serial.print("pushing /logs failed:");
      Serial.println(Firebase.error());
      return;
  }
  Serial.print("pushed: /logs/");
  Serial.println(name);
  Serial.println(Str_data);
  delay(10);
  
#endif
  
}
